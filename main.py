
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü—Ä–æ—Å—Ç–∏–π –∫–∞—Ç–∞–ª–æ–≥
catalog = [
    {"id": 1, "name": "–í—É–¥–∏–ª–∏—â–µ CarpX", "price": 1299, "desc": "–õ–µ–≥–∫–µ —ñ –º—ñ—Ü–Ω–µ"},
    {"id": 2, "name": "–ö–æ—Ç—É—à–∫–∞ Daiwa", "price": 2499, "desc": "–Ø–ø–æ–Ω—Å—å–∫–∞ —è–∫—ñ—Å—Ç—å"},
    {"id": 3, "name": "–ì–∞—á–∫–∏ Owner 10—à—Ç", "price": 149, "desc": "–°—É–ø–µ—Ä –≥–æ—Å—Ç—Ä—ñ"},
]

user_carts = {}

def main_menu():
    kb = [
        [KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton(text="üõí –ú—ñ–π –∫–æ—à–∏–∫")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω —Ä–∏–±–æ–ª–æ–≤–Ω–∏—Ö —Å–Ω–∞—Å—Ç–µ–π.
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

@dp.message(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    text = "üé£ –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:

"
    for item in catalog:
        text += f"{item['id']}. {item['name']} ‚Äî {item['price']} –≥—Ä–Ω
{item['desc']}

"
    text += "–í—ñ–¥–ø—Ä–∞–≤ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –∫–æ—à–∏–∫."
    await message.answer(text)

@dp.message(lambda message: message.text.isdigit() and int(message.text) in [item["id"] for item in catalog])
async def add_to_cart(message: types.Message):
    user_id = message.from_user.id
    product_id = int(message.text)
    product = next((item for item in catalog if item["id"] == product_id), None)
    if not product:
        return await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    if user_id not in user_carts:
        user_carts[user_id] = []

    user_carts[user_id].append(product)
    await message.answer(f"‚úÖ {product['name']} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!")

@dp.message(lambda message: message.text == "üõí –ú—ñ–π –∫–æ—à–∏–∫")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        return await message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    text = "üõç –í–∞—à –∫–æ—à–∏–∫:

"
    total = 0
    for item in cart:
        text += f"- {item['name']} ‚Äî {item['price']} –≥—Ä–Ω
"
        total += item['price']
    text += f"
üí∞ –í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω

–í—ñ–¥–ø—Ä–∞–≤—Ç–µ '–ó–∞–º–æ–≤–∏—Ç–∏', —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏."
    await message.answer(text)

@dp.message(lambda message: message.text.lower() == "–∑–∞–º–æ–≤–∏—Ç–∏")
async def make_order(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        return await message.answer("‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    total = sum(item['price'] for item in cart)
    products = ", ".join([item['name'] for item in cart])

    await bot.send_message(ADMIN_ID, f"üÜï –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{message.from_user.username}
"
                                    f"ID: {user_id}
"
                                    f"–¢–æ–≤–∞—Ä–∏: {products}
"
                                    f"–°—É–º–∞: {total} –≥—Ä–Ω")
    await message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    user_carts[user_id] = []

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
